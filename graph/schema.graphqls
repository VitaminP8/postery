type User {
  id: ID!
  username: String!
  email: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  commentsDisabled: Boolean!
  authorID: ID!
  comments(limit: Int, offset: Int): CommentConnection!
}

type Comment {
  id: ID!
  postID: ID!
  parentID: ID
  content: String!
  authorID: ID!
  createdAt: String!
  hasReplies: Boolean!
  children: [Comment!]!
}

type CommentConnection {
  items: [Comment!]!
  hasMore: Boolean!
  nextOffset: Int!
}

type Query {
  posts: [Post!]!
  post(id: ID!): Post
  comments(postID: ID!, limit: Int, offset: Int): CommentConnection!
  replies(parentID: ID!, limit: Int, offset: Int): CommentConnection!
}

type Mutation {
  createPost(title: String!, content: String!): Post!
  createComment(postID: ID!, parentID: ID, content: String!): Comment!
  registerUser(username: String!, email: String!, password: String!): User!
  loginUser(username: String!, password: String!): String #JWT
  disableComment(id: ID!): Boolean!
  enableComment(id: ID!): Boolean!
  deletePostById(id: ID!): Boolean!
}

type Subscription {
  commentAdded(postID: ID!): Comment!
}
